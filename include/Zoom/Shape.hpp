////////////////////////////////////////////////////////////
///
/// Zoom C++ library
/// Copyright (C) 2011-2012 ZinLibs (zinlibs@gmail.com)
///
/// This software is provided 'as-is', without any express or implied warranty.
/// In no event will the authors be held liable for any damages arising from the use of this software.
/// Permission is granted to anyone to use this software for any purpose,
/// including commercial applications, and to alter it and redistribute it freely,
/// subject to the following restrictions:
///
/// 1. The origin of this software must not be misrepresented;
///    you must not claim that you wrote the original software.
///    If you use this software in a product, an acknowledgment
///    in the product documentation would be appreciated but is not required.
///
/// 2. Altered source versions must be plainly marked as such,
///    and must not be misrepresented as being the original software.
///
/// 3. This notice may not be removed or altered from any source distribution.
///
////////////////////////////////////////////////////////////

#ifndef ZOOM_SHAPE_HPP
#define ZOOM_SHAPE_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <map>
#include <SFML/Graphics.hpp>
#include <Zoost/Geom.hpp>
#include <Zoost/Curve.hpp>
#include <Zoom/Color.hpp>
#include <Zoom/Config.hpp>

namespace zin
{
	
class ZOOM_API Shape : public sf::Drawable, public sf::NonCopyable, public Geom::Observer  
{
public:
    
    ////////////////////////////////////////////////////////////
    // Default constructor
    ////////////////////////////////////////////////////////////
	Shape(Geom& geom);
    
    ////////////////////////////////////////////////////////////
    // Clear the shape
    ////////////////////////////////////////////////////////////
    void clear();

    ////////////////////////////////////////////////////////////
    // Get the geometry of the shape
    ////////////////////////////////////////////////////////////
    Geom& getGeom();
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	void setColor(size_t VertexId, const Color& color);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	void setFillColor(const Color& color);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	void setOutlineColor(const Color& color);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	void setOutlineWidth(Uint32 width);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	void setPointSize(Uint32 size);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	Uint32 getPointSize();
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	const Color& getVertexColor(size_t indice);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	void setVertexColor(size_t indice, const Color& color);
    
    ////////////////////////////////////////////////////////////
    // 
    ////////////////////////////////////////////////////////////
	static bool debugModeEnabled;

protected:
    
    ////////////////////////////////////////////////////////////
    // Draw the shape
    ////////////////////////////////////////////////////////////
	virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;

private:

    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    Geom&              m_geom;
	Color  		   	   m_fillColor,
		   			   m_outlineColor;
	Uint32 			   m_outlineWidth,
		   			   m_pointSize;
	std::vector<Color> m_vertexColor;
};

}

#endif // ZOOM_SHAPE_HPP